package com.webtest.springboot.controller;

import com.webtest.springboot.errors.ResponseBodys;
import com.webtest.springboot.errors.UserAlreadyExistsException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.webtest.springboot.model.User;
import com.webtest.springboot.repository.UserRepository;
import java.util.List;
import java.util.Objects;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@RestController
@RequestMapping("/userservice")
public class UserController {

    public static final Logger logger = LoggerFactory.getLogger(UserController.class);

    @Autowired
    UserRepository userRepository;

    @RequestMapping(value = "/register", method = RequestMethod.GET)
    public ResponseEntity<User> registerUser(
            @RequestParam("firstname") String firstName,
            @RequestParam("lastname") String lastName,
            @RequestParam("username") String userName,
            @RequestParam("password") String password) {

        User user = new User(firstName, lastName, userName, password);
        
        if (Objects.nonNull(userRepository.findOne("Id generated by the back-end"))) {
            throw new UserAlreadyExistsException("Id generated by the back-end", ResponseBodys.USER_ALREADY_EXISTS);
        }
        user.setId("Id generated by the back-end");
        User saved = userRepository.save(user);
        
        return new ResponseEntity<>(saved, HttpStatus.OK);
    }

    @RequestMapping("/findbylastname")
    public String fetchDataByLastName(@RequestParam("lastname") String lastName) {
        return userRepository.findByLastName(lastName).toString();
    }

    @RequestMapping("/findall")
    @ResponseBody
    public List<User> findAll() {
        List<User> users = userRepository.findAll();
        return users;
    }
}
